knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
library(fabletools)
library(fpp3)
setwd("C:\\Users\\surya\\Desktop\\GL BABI\\Capstone GL")
setwd("C:\\Users\\surya\\Desktop\\Demo Day")
data_t10 <- readr::read_csv("data_t10.csv" )
data_t10 <- data_t10 %>%
mutate(month = yearmonth(date))%>%
as_tsibble(key = c(product, city), index = month)
class(data_t10)
has_gaps(data_t10, .full = T)
library(readr)
library(tidyverse)
library(fabletools)
library(fpp3)
setwd("C:\\Users\\surya\\Desktop\\Demo Day")
data_t10 <- readr::read_csv("data_t10.csv" )
data_t10 <- data_t10 %>%
mutate(month = yearmonth(date))%>%
as_tsibble(key = c(product, city), index = month)
class(data_t10)
has_gaps(data_t10, .full = TRUE)
#Time Series Components
data_t10 %>%
STL(sales ~ trend(window=21) + season(window = 13), robust = TRUE) %>%
autoplot()
#Time Series Components
data_t10 %>%
STL(sales ~ trend(window=21) + season(window = 13), robust = TRUE) %>%
autoplot()
library(readr)
library(tidyverse)
library(fabletools)
library(fpp3)
install.packages("feasts")
install.packages("feasts")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(tidyverse)
library(fabletools)
library(fpp3)
library(feasts)
setwd("C:\\Users\\surya\\Desktop\\Demo Day")
data_t10 <- readr::read_csv("data_t10.csv" )
data_t10 <- data_t10 %>%
mutate(month = yearmonth(date))%>%
as_tsibble(key = c(product, city), index = month)
class(data_t10)
has_gaps(data_t10, .full = TRUE)
#Time Series Components
data_t10 %>%
STL(sales ~ trend(window=21) + season(window = 13), robust = TRUE) %>%
autoplot()
#Time Series Components
data_t10 %>%
STL(sales ~ trend(window=21) + season(window = 13), robust = TRUE) %>%
ggplot2::autoplot()
#Time Series Components
data_t10 %>%
STL(sales ~ trend(window=21) + season(window = 13), robust = TRUE) %>%
autoplot()
data_t10 %>%
features(sales, feature_set(tags = "stl"))
data_t10 %>%
features(sales, feat_stl)
data_t10 %>%
features(sales, feat_stl) %>%
ggplot(aes(x = trend_strength, y = seasonal_strength_year, col = product))+
geom_point() + facet_wrap(vars(city))
data_t10 %>%
features(sales, feat_stl) %>%
group_by(product) %>%
summarise(avg_trend_str = mean(trend_strength))
data_t10 %>%
features(sales, feat_stl) %>%
group_by(product) %>%
summarise(avg_trend_str = mean(trend_strength))
data_t10 %>%
features(sales, feat_stl) %>%
group_by(product) %>%
summarise(avg_season_str = mean(seasonal_strength_year))
#Measuring the average trend strength of the city
data_t10 %>%
features(sales, feat_stl) %>%
group_by(city) %>%
summarise(avg_trend_str = mean(trend_strength))
t10_train <- data_t10 %>%
group_by(product, city) %>%
slice(1:36)
t10_test <- data_t10 %>%
group_by(product, city) %>%
slice(37:48)
data_t10_agg <- data_t10 %>%
aggregate_key( product * city , sales = sum(sales))
train_agg <- t10_train %>%
aggregate_key( product * city , sales = sum(sales))
test_agg <- t10_test %>%
aggregate_key( product * city , sales = sum(sales))
fc <- t10_train %>%
aggregate_key(product*city, sales= sum(sales)) %>%
model(ets = ETS(sales)) %>%
reconcile(ets_adjusted = min_trace(ets)) %>%
forecast(h=12)
fc <- t10_train %>%
aggregate_key(product*city, sales= sum(sales)) %>%
model(ets = ETS(sales)) %>%
reconcile(ets_adjusted = min_trace(ets)) %>%
forecast(h=12)
fc %>%
filter(is_aggregated(product) & is_aggregated(city)) %>%
autoplot(train_agg, level=95)
#By City - Kolkata
fc %>%
filter(is_aggregated(product) & city=="Kolkata") %>%
autoplot(train_agg, level=95)
#By Product - Mixers
fc %>%
filter(is_aggregated(city) & product=="Mixers") %>%
autoplot(train_agg, level=95)
fc %>%
accuracy(test_agg)
fc %>%
accuracy(test_agg) %>%
group_by(.model) %>%
summarise(RMSE = mean(RMSE)) %>%
arrange(RMSE)
fc %>%
accuracy(test_agg) %>%
group_by(.model) %>%
summarise(MAPE = mean(MAPE)) %>%
arrange(MAPE)
fc %>%
accuracy(test_agg) %>%
group_by(.model) %>%
summarise(MASE = mean(MASE)) %>%
arrange(MASE)
fc %>%
accuracy(test_agg) %>%
group_by(.model) %>%
summarise(MAE = mean(MAE)) %>%
arrange(MAE)
fc %>%
accuracy(test_agg) %>%
group_by(.model) %>%
summarise(ME = mean(ME)) %>%
arrange(ME)
fc %>%
accuracy(test_agg) %>%
group_by(.model) %>%
summarise(MAAPE = mean(AAPE)) %>%
arrange(MAAPE)
fc %>%
accuracy(test_agg)
fc
